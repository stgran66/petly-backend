{
  "openapi": "3.0.3",
  "info": {
    "title": "Petly Project",
    "description": "Petly project - swagger page",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://petly-backend-backup.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Everything about user authentication"
    },
    {
      "name": "notices",
      "description": "Access to notices"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "news",
      "description": "Access to news"
    },
    {
      "name": "services",
      "description": "Access to services"
    },
    {
      "name": "healthz",
      "description": "Server health check"
    }
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register new user",
        "description": "Register new user",
        "requestBody": {
          "description": "Register new user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Pet not found"
          },
          "409": {
            "description": "Email in use"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Log user in",
        "description": "Log user in",
        "requestBody": {
          "description": "Log user in",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@email.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "userPassword"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Wrong credentials"
          }
        }
      }
    },
    "/api/auth/logout": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Log user out",
        "description": "Log user out",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/api/auth/update": {
      "put": {
        "tags": [
          "auth"
        ],
        "summary": "Updates user data",
        "description": "Updates user data",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Should have at least one field",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "minProperties": 1,
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "john@email.com",
                    "minLength": 10,
                    "maxLength": 63,
                    "format": "email",
                    "pattern": "^(?!-)[a-zA-Z0-9_.-]+@[a-zA-Z0-9.-]+$"
                  },
                  "name": {
                    "type": "string",
                    "example": "John"
                  },
                  "city": {
                    "type": "string",
                    "example": "Kyiv"
                  },
                  "phone": {
                    "type": "string",
                    "minLength": 13,
                    "maxLength": 13,
                    "pattern": "^\\+380\\d{3}\\d{2}\\d{2}\\d{2}$",
                    "example": "+380801112233"
                  },
                  "birthday": {
                    "type": "string",
                    "example": "00.00.0000"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/auth/avatars": {
      "patch": {
        "tags": [
          "auth"
        ],
        "summary": "Update user's avatar",
        "description": "Update user's avatar",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Uploaded avatar file, fieldname should be avatar",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "fieldname": {
                    "type": "string",
                    "enum": [
                      "avatar"
                    ]
                  },
                  "originalname": {
                    "type": "string"
                  },
                  "mimetype": {
                    "type": "string",
                    "enum": [
                      "image/png",
                      "image/jpeg"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      }
    },
    "/api/notices/{category}": {
      "get": {
        "tags": [
          "notices"
        ],
        "summary": "Gets notices by category",
        "description": "Gets notices by category",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "description": "category of notices",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "sell",
                "lost-found",
                "for-free"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "number of query page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of notices per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/notices/{noticeId}": {
      "get": {
        "tags": [
          "notices"
        ],
        "summary": "Gets notice by id",
        "description": "Gets notice by id",
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "description": "category of notices",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "tags": [
          "notices"
        ],
        "summary": "Deletes notice",
        "description": "Deletes notice",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noticeId",
            "in": "path",
            "description": "category of notices",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "not authorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/notices/favorite": {
      "get": {
        "tags": [
          "notices"
        ],
        "summary": "Gets notices by favorite status",
        "description": "Gets notices by favorite status",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "number of query page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of notices per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "not authorized"
          }
        }
      }
    },
    "/api/notices/own": {
      "get": {
        "tags": [
          "notices"
        ],
        "summary": "Gets notices created by user",
        "description": "Gets notices created by user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "number of query page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of notices per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "not authorized"
          }
        }
      }
    },
    "/api/notices/{noticeId}/favorite": {
      "post": {
        "tags": [
          "notices"
        ],
        "summary": "Adds notice to favorite",
        "description": "Adds notice to favorite",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noticeId",
            "in": "path",
            "description": "notice Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "wrong id"
          },
          "401": {
            "description": "not authorized"
          }
        }
      }
    },
    "/api/notices/{noticeId}/remove-favorite": {
      "post": {
        "tags": [
          "notices"
        ],
        "summary": "Removes notice from favorite",
        "description": "Removes notice from favorite",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noticeId",
            "in": "path",
            "description": "notice Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "wrong id"
          },
          "401": {
            "description": "not authorized"
          }
        }
      }
    },
    "/api/notices": {
      "post": {
        "tags": [
          "notices"
        ],
        "summary": "Creates new notice",
        "description": "Creates new notice",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Register new user",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Notice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "validation error"
          },
          "401": {
            "description": "not authorized"
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Returns user data",
        "description": "Returns user data",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/api/user/pet": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Adds new user pet",
        "description": "Adds new user pet",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pet data",
          "content": {
            "multipart/form-data": {
              "schema": {
                "photo": {
                  "type": "file"
                },
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/api/user/pet/{petId}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updates pet from user collection",
        "description": "Updates pet from user collection",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pet data - at least one field required",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "bobik"
                  },
                  "birthday": {
                    "type": "string",
                    "example": "00.00.1111"
                  },
                  "breed": {
                    "type": "string",
                    "example": "Labrador"
                  },
                  "photo": {
                    "type": "string"
                  },
                  "comments": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes pet from user collection",
        "description": "Deletes pet from user collection",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/news": {
      "get": {
        "tags": [
          "news"
        ],
        "summary": "Gets all news",
        "description": "Gets all news",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Gets info about partners services",
        "description": "Gets info about partners services",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/healthz": {
      "get": {
        "tags": [
          "healthz"
        ],
        "summary": "Health check for server",
        "description": "If server is operational always gets 200",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@email.com",
            "minLength": 10,
            "maxLength": 63,
            "format": "email",
            "pattern": "^(?!-)[a-zA-Z0-9_.-]+@[a-zA-Z0-9.-]+$"
          },
          "password": {
            "type": "string",
            "example": "qwerty123",
            "minLength": 7,
            "maxLength": 32
          },
          "name": {
            "type": "string",
            "example": "John"
          },
          "city": {
            "type": "string",
            "example": "Kyiv"
          },
          "phone": {
            "type": "string",
            "minLength": 13,
            "maxLength": 13,
            "pattern": "^\\+380\\d{3}\\d{2}\\d{2}\\d{2}$",
            "example": "+380801112233"
          },
          "birthday": {
            "type": "string",
            "example": "00.00.0000"
          },
          "favorite": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "avatarURL": {
            "type": "string"
          },
          "pets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "required": [
          "email",
          "password",
          "name"
        ],
        "xml": {
          "name": "user"
        }
      },
      "Pet": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "bobik"
          },
          "birthday": {
            "type": "string",
            "example": "00.00.1111"
          },
          "breed": {
            "type": "string",
            "example": "Labrador"
          },
          "photo": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Notice": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 2,
            "maxLength": 48,
            "pattern": "/^[a-zA-zа-яіїєА-ЯІЇЄ,.! ]+$/",
            "example": "Puppy for adoption"
          },
          "breed": {
            "type": "string",
            "minLength": 2,
            "maxLength": 24,
            "example": "Retriever"
          },
          "place": {
            "type": "string",
            "minLength": 4,
            "maxLength": 60,
            "example": "Kyiv"
          },
          "price": {
            "type": "string",
            "minLength": 1,
            "pattern": "/^[1-9][0-9]*$/",
            "example": "200$"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 16,
            "example": "Goldie"
          },
          "birthday": {
            "type": "string",
            "format": "DD.MM.YYYY",
            "example": "20.10.2015"
          },
          "sex": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          },
          "imageUrl": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "sell",
              "lost-found",
              "for-free"
            ]
          }
        },
        "required": [
          "title",
          "name",
          "sex",
          "category",
          "place"
        ]
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    }
  }
}